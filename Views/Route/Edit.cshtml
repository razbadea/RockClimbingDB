@using RockClimbingDb.Common;
@using System;
@using RockClimbingDb.ViewModels;
@model RockClimbingDb.ViewModels.EditRouteViewModel

@{
    ViewBag.Title = "Edit";

    var climbingGrades = Enum.GetValues(typeof(ClimbEnums.Grade)).Cast<ClimbEnums.Grade>();
    var climbingGradesSelectList = new List<SelectListItem>();
    foreach (var grade in climbingGrades)
    {
        climbingGradesSelectList.Add(new SelectListItem { Text = grade.GetDisplayName(), Value = grade.ToString() });
    }

    var countries = (List<SelectListItem>)ViewBag.Countries;
    countries.Insert(0, new SelectListItem()
    {
        Value = null,
        Text = "Select Country"
    });


    var routeLocation = new RouteDetailsViewModel();

}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Route</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @*@Html.HiddenFor(model => model.Id)*@

        <div class="form-group">
            @Html.Label("Country", new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.CountryId, countries, new { onchange = "addRoute_Country_onChange(this)" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Area", new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.AreaId, new List<SelectListItem>(), new
                {
                    onchange = "addRoute_Area_onChange(this)",
                    id = "area_dropdown",
                    data_initial_value = Model.AreaId
                })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Crag", new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.CragId, new List<SelectListItem>(), new
           {
               onchange = "addRoute_Crag_onChange(this)",
               id = "crag_dropdown",
               data_initial_value = Model.CragId
           })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Sector", new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.SectorId, new List<SelectListItem>(), new
                {
                    id = "sector_dropdown",
                    data_initial_value = Model.SectorId

                })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Grade, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.Grade, climbingGradesSelectList)
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="SaveChanges" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<script>
    window.onload = function () {
        console.log("Test");
        $("#CountryId").change();
    };
</script>